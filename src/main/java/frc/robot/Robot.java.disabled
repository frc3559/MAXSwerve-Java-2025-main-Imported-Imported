// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import com.revrobotics.spark.SparkLowLevel.MotorType;
import com.revrobotics.spark.SparkMax;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;
import frc.robot.Constants.DriveConstants;
import frc.robot.Constants.MMotorConstants;
import frc.robot.Constants.OIConstants;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to
 * each mode, as described in the TimedRobot documentation. If you change the
 * name of this class or
 * the package after creating this project, you must also update the
 * build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  private Command m_autonomousCommand;

  private RobotContainer m_robotContainer;
  // Operator Controller
  XboxController m_operatorController = new XboxController(OIConstants.kOperatorControllerPort);
  // Motor declarations -- arm
  //SparkMax armJoint = new SparkMax(DriveConstants.kArmJointCanId, MotorType.kBrushless);
  //SparkMax armWheel = new SparkMax(DriveConstants.kArmWheelCanId, MotorType.kBrushless);
  SparkMax elevatorLift = new SparkMax(DriveConstants.kElevatorLiftCanId, MotorType.kBrushless);
  SparkMax elevatorJoint = new SparkMax(DriveConstants.kElevatorJointCanId, MotorType.kBrushless);
  SparkMax elevatorLift2 = new SparkMax(DriveConstants.kElevatorLift2CanId, MotorType.kBrushless);
  SparkMax elevatorLift3 = new SparkMax(DriveConstants.kElevatorLift3CanId, MotorType.kBrushless);
  // Motor declarations -- grabber
  SparkMax grabberWheel = new SparkMax(DriveConstants.kGrabberWheelCanId, MotorType.kBrushless);
  // Limit Switch Declarations
  DigitalInput grabberSwitch = new DigitalInput(0);
  // Absolute Encoder Declarations

  // LimeLight

  /**
   * This function is run when the robot is first started up and should be used
   * for any
   * initialization code.
   */
  @Override
  public void robotInit() {
    // Instantiate our RobotContainer. This will perform all our button bindings,
    // and put our
    // autonomous chooser on the dashboard.
    m_robotContainer = new RobotContainer();
  }

  /**
   * This function is called every 20 ms, no matter the mode. Use this for items
   * like diagnostics
   * that you want ran during disabled, autonomous, teleoperated and test.
   *
   * <p>
   * This runs after the mode specific periodic functions, but before LiveWindow
   * and
   * SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {
    // Runs the Scheduler. This is responsible for polling buttons, adding
    // newly-scheduled
    // commands, running already-scheduled commands, removing finished or
    // interrupted commands,
    // and running subsystem periodic() methods. This must be called from the
    // robot's periodic
    // block in order for anything in the Command-based framework to work.
    CommandScheduler.getInstance().run();
    m_robotContainer.telemetry();
  }

  /** This function is called once each time the robot enters Disabled mode. */
  @Override
  public void disabledInit() {
  }

  @Override
  public void disabledPeriodic() {
  }

  /**
   * This autonomous runs the autonomous command selected by your
   * {@link RobotContainer} class.
   */
  @Override
  public void autonomousInit() {
    m_autonomousCommand = m_robotContainer.getAutonomousCommand();

    /*
     * String autoSelected = SmartDashboard.getString("Auto Selector",
     * "Default"); switch(autoSelected) { case "My Auto": autonomousCommand
     * = new MyAutoCommand(); break; case "Default Auto": default:
     * autonomousCommand = new ExampleCommand(); break; }
     */

    // schedule the autonomous command (example)
    if (m_autonomousCommand != null) {
      m_autonomousCommand.schedule();
    }
  }

  /** This function is called periodically during autonomous. */
  @Override
  public void autonomousPeriodic() {
wait(13000);
  }

  @Override
  public void teleopInit() {
    // This makes sure that the autonomous stops running when
    // teleop starts running. If you want the autonomous to
    // continue until interrupted by another command, remove
    // this line or comment it out.
    if (m_autonomousCommand != null) {
      m_autonomousCommand.cancel();
    }
  }

  /** This function is called periodically during operator control. */
  @Override
  
  public void teleopPeriodic() {
    //armJoint.set(-m_operatorController.getLeftY());

    if (!grabberSwitch.get()) {
      if (m_operatorController.getLeftTriggerAxis() > 0) {
        grabberWheel.set(-m_operatorController.getLeftTriggerAxis());
      } else {
        grabberWheel.set(m_operatorController.getRightTriggerAxis());
      }
    } else {
      grabberWheel.set(0);
    }

    // beginning of elevator code -- lift code
    if (m_operatorController.getRightBumper()) {
      elevatorLift.set(MMotorConstants.kElevatorLiftSpeedModifier);
      elevatorLift2.set(MMotorConstants.kElevatorLiftSpeedModifier * MMotorConstants.kElevatorPart2Modifier);
      elevatorLift3.set(MMotorConstants.kElevatorLiftSpeedModifier * MMotorConstants.kElevatorPart3Modifier);
    } else {
      if (m_operatorController.getLeftBumper()) {
        elevatorLift.set(-MMotorConstants.kElevatorLiftSpeedModifier);
        elevatorLift2.set(-MMotorConstants.kElevatorLiftSpeedModifier * MMotorConstants.kElevatorPart2Modifier);
        elevatorLift3.set(-MMotorConstants.kElevatorLiftSpeedModifier * MMotorConstants.kElevatorPart3Modifier);
      } else {
        elevatorLift.set(0);
        elevatorLift2.set(0);
        elevatorLift3.set(0);
      }
    }
    // joint code
    if (m_operatorController.getXButton()) {
      elevatorJoint.set(MMotorConstants.kElevatorJointSpeedModifier);
    } else {
      if (m_operatorController.getYButton()) {
        elevatorJoint.set(-MMotorConstants.kElevatorJointSpeedModifier);
      } else {
        elevatorJoint.set(0);
      }
    }
    // end of elevator code

/**    if (m_operatorController.getAButton()) {
      armWheel.set(MMotorConstants.kArmWheelSpeedModifier);
    } else {
      if (m_operatorController.getBButton()) {
        armWheel.set(-MMotorConstants.kArmWheelSpeedModifier);
      } else {
        armWheel.set(0);
      }
    } */
  }
  // Need to reverse wheel also

  @Override
  public void testInit() {
    // Cancels all running commands at the start of test mode.
    CommandScheduler.getInstance().cancelAll();
  }

  /** This function is called once when the robot is first started up. */
  @Override
  public void simulationInit() {
  }

  /** This function is called periodically whilst in simulation. */
  @Override
  public void simulationPeriodic() {
  }

  /**
   * this creates a wait
   * 
   * @param time - Time to wait in milliseconds.
   */
  public static void wait(int time) {
    try {
      Thread.sleep(time);
    } catch (InterruptedException ex) {
      Thread.currentThread().interrupt();
    }
  }
}